@page "/category"
@model Presentation.Pages.Staff.ManagerCategoryModel
@{
}
@{
    Layout = "~/Views/Shared/_navbar.cshtml";
    ViewData["Title"] = "Quản lý chuyên mục";
}

@section Head {
    <style>
        /* --- Reuse với Category --- */
        .form-underline {
            border: none !important;
            border-bottom: 1.5px solid #e2e8f0 !important;
            border-radius: 0 !important;
            background: transparent !important;
            box-shadow: none !important
        }

            .form-underline:focus {
                border-bottom-color: #0d6efd !important;
                box-shadow: none !important
            }

        .filter-card {
            border: 0 !important;
            box-shadow: 0 1px 0 #e9ecef !important;
            border-radius: 12px
        }

        .btn-icon {
            width: 32px;
            height: 32px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px
        }

            .btn-icon i {
                font-size: 16px
            }

        .table th, .table td {
            vertical-align: middle;
        }

        .toolbar {
            display: flex;
            gap: 8px;
            align-items: center;
            justify-content: flex-end;
        }
    </style>
}



<div class="d-flex justify-content-between align-items-center mb-3">
    <button type="button"
            class="btn btn-primary btn-sm px-3 py-2 rounded-2"
            data-bs-toggle="modal"
            data-bs-target="#categoryModal"
            onclick="openAddModal()">
        <i class="bi bi-plus-lg me-1"></i> Thêm chuyên mục
    </button>

</div>

<form class="card p-3 shadow-sm mb-4 filter-card" onsubmit="event.preventDefault();">
    <div class="row g-3 align-items-end">
        <div class="col-md-5">
            <label class="form-label fw-medium">Từ khoá</label>
            <input type="text" id="Keyword" class="form-control form-underline" placeholder="Tên hoặc mô tả...">
        </div>
        <div class="col-md-3">
            <label class="form-label fw-medium">Trạng thái</label>
            <select id="Status" class="form-select form-underline">
                <option value="">Tất cả</option>
                <option value="1">Active</option>
                <option value="0">InActive</option>
            </select>
        </div>
        <div class="col-md-2">
            <button type="submit" class="btn btn-outline-primary w-100 btn-sm">
                <i class="bi bi-search me-1"></i> Tìm kiếm
            </button>
        </div>
    </div>
</form>

<!-- Bảng -->
<div class="card shadow-sm">
    <div class="table-responsive">
        <table class="table align-middle table-hover mb-0">
            <thead class="table-light">
                <tr>
                    <th style="width:80px">ID</th>
                    <th>Tên chuyên mục</th>
                    <th>Mô tả</th>
                    <th style="width:120px">ParentID</th>
                    <th style="width:120px">Trạng thái</th>
                    <th class="text-center" style="width:140px">Thao tác</th>
                </tr>
            </thead>
            <tbody id="rows">
            </tbody>
        </table>
    </div>
</div>

<!-- Modal Add/Edit -->
<div class="modal fade" id="categoryModal" tabindex="-1" aria-hidden="true">
    <input type="hidden" name="__RequestVerificationToken" value="@Model.AntiForgeryToken" />
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form method="post" id="createForm">
                <div class="modal-header">
                    <h5 class="modal-title fw-semibold" id="modalTitle">Thêm chuyên mục</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="__RequestVerificationToken" value="@Model.AntiForgeryToken" />

                    <input type="hidden" id="CategoryId" name="CategoryId">

                    <div class="mb-3">
                        <label class="form-label">Tên chuyên mục <span class="text-danger">*</span></label>
                        <input type="text" id="CategoryName" name="CategoryName" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Mô tả</label>
                        <textarea id="Description" name="CategoryDesciption" class="form-control" rows="3"></textarea>
                    </div>

                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="IsActive" name="IsActive" checked>
                        <label class="form-check-label" for="IsActive">Hiển thị (Active)</label>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-light border" data-bs-dismiss="modal">Huỷ</button>
                    <button type="submit" class="btn btn-primary">Lưu</button>
                </div>
            </form>
        </div>
    </div>
</div>
<div id="toasts" class="toast-container position-fixed top-0 end-0 p-3"></div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<!-- hidden token trong form/modal bất kỳ -->

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    (() => {
      // ====== CONST: endpoints ======
      const BASE = "/category";
      const LIST_URL   = `${BASE}?handler=List`;
      const CREATE_URL = `${BASE}?handler=CreateCategory`;
      const DELETE_URL = `${BASE}?handler=Delete`;

      // ====== CSRF token (Razor) ======
      const tokenEl = document.querySelector('input[name="__RequestVerificationToken"]');
      const CSRF = tokenEl ? tokenEl.value : "";

      // ====== Toast (Bootstrap 5) ======
      function showToast(message, type = "info", delay = 3500) {
        const id = "t" + Date.now();
        const bg = {
          info:"text-bg-info", success:"text-bg-success", warning:"text-bg-warning",
          danger:"text-bg-danger", primary:"text-bg-primary", secondary:"text-bg-secondary"
        }[type] || "text-bg-info";
        const html = `
    <div id="${id}" class="toast align-items-center ${bg} border-0 mb-2" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>`;
        const wrap = document.getElementById("toasts");
        wrap.insertAdjacentHTML("beforeend", html);
        const el = document.getElementById(id);
        new bootstrap.Toast(el, { delay, autohide: true }).show();
      }

      // ====== HTTP helpers (có cache-busting) ======
      async function getJSON(url) {
        const sep = url.includes("?") ? "&" : "?";
        const bust = `${sep}_=${Date.now()}`;
        const r = await fetch(url + bust, {
          headers: { "Accept":"application/json" },
          cache: "no-store"
        });
        if (!r.ok) { console.error("GET", url, r.status, await r.text()); throw new Error("GET fail"); }
        return r.json();
      }

      async function postJSON(url, data) {
        const r = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type":"application/json",
            "RequestVerificationToken": CSRF
          },
          body: JSON.stringify(data)
        });
        if (!r.ok) { console.error("POST", url, r.status, await r.text()); throw new Error("POST fail"); }
        return r.json();
      }

      // ====== Render list ======
      function renderRows(list){
        const tbody = document.getElementById("rows");
        if (!tbody) return;

        if (!list || list.length === 0){
          tbody.innerHTML = `<tr><td colspan="6" class="text-center text-muted">No category found.</td></tr>`;
          return;
        }

        tbody.innerHTML = list.map(a => `
          <tr>
            <td>${a.id ?? ""}</td>
            <td>${a.categoryname ?? ""}</td>
            <td>${a.categorydescription ?? ""}</td>
            <td>${a.categoryparent ?? ""}</td>
            <td>${a.isactive ?? ""}</td>
            <td>
              <button class="btn btn-sm btn-outline-primary me-1" onclick='openEdit(${JSON.stringify(a)})'>Edit</button>
              <button class="btn btn-sm btn-outline-danger" onclick='delAcc(${a.id})'>Delete</button>
            </td>
          </tr>
        `).join("");
      }

      // ====== Refresh (list) ======
      async function refreshAll() {
        const data = await getJSON(LIST_URL);
        renderRows(data);
      }
      // alias cho code cũ
      async function refresh(){ await refreshAll(); }

      // ====== SignalR ======
      window.hub = window.hub || new signalR.HubConnectionBuilder()
        .withUrl("/hubs/app")
        .withAutomaticReconnect()
        .build();

      hub.on("notice", (msg) => {
        showToast(msg || "Categories updated", "primary");
        refreshAll(); // auto reload danh sách
      });

      hub.on("forceLogout", (reason) => {
        showToast(reason || "You have been signed out.", "warning", 2500);
        setTimeout(()=> location.href="/login", 1200);
      });

      if (hub.state === "Disconnected") {
        hub.start().catch(err => showToast("Hub connect failed", "danger"));
      }

          // ====== Create ======
    const createForm = document.getElementById("createForm");
    if (createForm) {
      createForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const modalEl = document.getElementById("categoryModal");
        try {
          const fd = new FormData(e.target);
          // chấp cả 2 tên field để không lệch backend
          const desc = fd.get("CategoryDescription") ?? fd.get("CategoryDesciption") ?? "";
          const data = {
            CategoryName: fd.get("CategoryName"),
            CategoryDescription: desc,
            IsActive: document.getElementById("IsActive")?.checked ?? false
          };

          const result = await postJSON(CREATE_URL, data);

          // Chuẩn hoá flag thành một biến 'ok'
          const ok = (result?.ok === true) || (result?.success === true) || (result?.status === "OK");
          if (!ok) {
            throw new Error(result?.error || result?.message || "Create category failed!");
          }

          // Đóng modal đúng cách
          const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
          // Nếu muốn chắc chắn render sau khi modal đóng hẳn:
          const onHidden = async () => {
            modalEl.removeEventListener("hidden.bs.modal", onHidden);
            createForm.reset();
            showToast("✅ Thêm chuyên mục thành công!", "success");
            await refreshAll(); // cập nhật list
          };
          modalEl.addEventListener("hidden.bs.modal", onHidden);
          modal.hide();

        } catch (err) {
          console.error(err);
          showToast(err?.message || "⚠️ Lỗi kết nối khi tạo category", "danger");
          // tiếp tục rơi xuống finally để cleanup backdrop nếu cần
        } finally {
          // Phòng trường hợp backdrop kẹt do lỗi JS
          document.body.classList.remove("modal-open");
          document.body.style.removeProperty("padding-right");
          document.querySelectorAll(".modal-backdrop").forEach(el => el.remove());
        }
      });
    }


      // ====== Delete ======
      window.delAcc = async function(id) {
        if (!confirm("🗑️ Bạn có chắc chắn muốn xoá chuyên mục này?")) return;
        try {
          const result = await postJSON(DELETE_URL, { id });
          if (result.ok) {
            showToast("✅ Xoá chuyên mục thành công!", "success");
            await refreshAll(); // cập nhật lại bảng
          } else {
            showToast(result.error || "❌ Không thể xoá chuyên mục!", "danger");
          }
        } catch (err) {
          console.error("Delete error:", err);
          showToast("⚠️ Lỗi kết nối tới server.", "danger");
        }
      };

      // ====== Initial load ======
      document.addEventListener("DOMContentLoaded", refreshAll);
    })();
</script>
