@page "/account"
@model Presentation.Pages.Admin.ManagerAccountModel
@{
}@{
    Layout = "~/Views/Shared/_navbar.cshtml";
    ViewData["Title"] = "Quản lý tài khoản";
}
<head>
    <meta charset="utf-8">
    <title>Quản lý tài khoản (HTML thuần, không JS)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Chỉ dùng Bootstrap CSS, KHÔNG dùng JS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        /* Inputs/select chỉ gạch dưới */
        .form-underline {
            border: none !important;
            border-bottom: 1.5px solid #e2e8f0 !important;
            border-radius: 0 !important;
            background: transparent !important;
            box-shadow: none !important
        }

            .form-underline:focus {
                border-bottom-color: #0d6efd !important;
                box-shadow: none !important
            }

        .filter-card {
            border: 0 !important;
            box-shadow: 0 1px 0 #e9ecef !important;
            border-radius: 12px
        }

        .btn-icon {
            width: 32px;
            height: 32px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px
        }

            .btn-icon i {
                font-size: 16px
            }

        /* Popup thuần CSS dùng :target */
        .overlay {
            position: fixed;
            inset: 0;
            background: rgba(0,0,0,.35);
            display: none;
            align-items: center;
            justify-content: center;
            padding: 1rem;
            z-index: 1050;
        }

            .overlay:target {
                display: flex;
            }

        .popup {
            background: #fff;
            border-radius: 12px;
            max-width: 520px;
            width: 100%;
            box-shadow: 0 2px 20px rgba(0,0,0,.15);
        }

        .popup-header {
            padding: 14px 16px;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            justify-content: space-between
        }

        .popup-body {
            padding: 16px;
        }

        .popup-footer {
            padding: 12px 16px;
            border-top: 1px solid #eee;
            display: flex;
            gap: .5rem;
            justify-content: end
        }

        .close-btn {
            text-decoration: none;
            color: #6c757d
        }

            .close-btn:hover {
                color: #000
            }

        /* Link như nút icon */
        .link-btn {
            border: 1px solid #ced4da;
            padding: .25rem .5rem;
            border-radius: .375rem;
            text-decoration: none;
            color: #495057;
            display: inline-block
        }

            .link-btn:hover {
                background: #f8f9fa;
            }

        /* Badge vai trò */
        .badge-role {
            background: #6c757d;
        }

            .badge-role.staff {
                background: #0d6efd;
            }

            .badge-role.lecturer {
                background: #6c757d;
            }

        /* Nhãn nhỏ phần yêu cầu business rule */
        .note {
            font-size: .875rem;
            color: #6c757d
        }
    </style>
</head>
<div class="container py-4">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <h3 class="m-0">Accounts</h3>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createModal">+ New Account</button>
    </div>

    <table class="table table-striped align-middle">
        <thead>
            <tr>
                <th>UserName</th>
                <th>Email</th>
                <th>Role</th>
                <th>Status</th>
                <th style="width:220px;"></th>
            </tr>
        </thead>
        <tbody id="rows">      
        </tbody>
    </table>
</div>


<!-- Create Modal -->
<div class="modal fade" id="createModal" tabindex="-1">
    <input type="hidden" name="__RequestVerificationToken" value="@Model.AntiForgeryToken" />
    <div class="modal-dialog">
        <form class="modal-content" id="createForm">
            <div class="modal-header">
                <h5 class="modal-title">Create account</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" name="__RequestVerificationToken" value="@Model.AntiForgeryToken" />
                <div class="mb-2">
                    <label class="form-label">UserName</label>
                    <input class="form-control" name="UserName" required />
                </div>
                <div class="mb-2">
                    <label class="form-label">Email</label>
                    <input class="form-control" name="Email" type="email" required />
                </div>
                <div class="mb-2">
                    <label class="form-label">Role</label>
                    <select class="form-select" name="Role">
                        <option value="1">Staff</option>
                        <option value="3">Admin</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal" type="button">Cancel</button>
                <button class="btn btn-primary" type="submit">Create</button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog">
        <form class="modal-content" id="editForm">
            <div class="modal-header">
                <h5 class="modal-title">Edit account</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" name="__RequestVerificationToken" value="@Model.AntiForgeryToken" />
                <input type="hidden" name="Id" />
                <div class="mb-2">
                    <label class="form-label">UserName</label>
                    <input class="form-control" name="UserName" required />
                </div>
                <div class="mb-2">
                    <label class="form-label">Email</label>
                    <input class="form-control" name="Email" type="email" required />
                </div>
                <div class="mb-2">
                    <label class="form-label">Role</label>
                    <select class="form-select" name="Role">
                        <option>Staff</option>
                        <option>Admin</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal" type="button">Cancel</button>
                <button class="btn btn-primary" type="submit">Save</button>
            </div>
        </form>
    </div>
</div>
<!-- Toast container -->
<div id="toasts" class="toast-container position-fixed top-0 end-0 p-3"></div>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<!-- hidden token trong form/modal bất kỳ -->

<script>
        async function refresh(){
      const data = await getJSON("/account?handler=List");
      renderRows(data);
    }
        // ===== Toast helper (Bootstrap 5) =====
    function showToast(message, type = "info", delay = 3500) {
      const id = "t" + Date.now();
      const bg =
        {info:"text-bg-info",success:"text-bg-success",warning:"text-bg-warning",
         danger:"text-bg-danger",primary:"text-bg-primary",secondary:"text-bg-secondary"}[type] || "text-bg-info";
      const html = `
        <div id="${id}" class="toast align-items-center ${bg} border-0 mb-2" role="alert" aria-live="assertive" aria-atomic="true">
          <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
        </div>`;
      const wrap = document.getElementById("toasts");
      wrap.insertAdjacentHTML("beforeend", html);
      const el = document.getElementById(id);
      new bootstrap.Toast(el, { delay, autohide: true }).show();
        }
        // ===== SignalR =====
    window.hub = window.hub || new signalR.HubConnectionBuilder()
      .withUrl("/hubs/app")
      .withAutomaticReconnect()
      .build();

    hub.on("notice", (msg) => {
          showToast(msg, "primary");  
          refresh();                     // ⬅️ auto reload danh sách

    });
    hub.on("forceLogout", (reason) => {
      showToast(reason || "You have been signed out.", "warning", 2500);
      setTimeout(()=> location.href="/login", 1200);
    });
    if (hub.state === "Disconnected") {
      hub.start().catch(err => showToast("Hub connect failed", "danger"));
    }
// ===== Helpers =====
const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

async function getJSON(url){
  const r = await fetch(url, { headers: { "Accept":"application/json" }});
  if(!r.ok){ console.error("GET", url, r.status, await r.text()); return []; }
  return r.json();
}
// postJson
async function postJSON(url, data){
  const r = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type":"application/json",
      "RequestVerificationToken": token // ⭐ bắt buộc khi dùng [ValidateAntiForgeryToken] + JSON
    },
    body: JSON.stringify(data)
  });
  if(!r.ok){ console.error("POST", url, r.status, await r.text()); return { ok:false }; }
  return r.json();
}

function renderRows(list){
  const tbody = document.getElementById("rows");
  if(!list || list.length === 0){
    tbody.innerHTML = `<tr><td colspan="4" class="text-center text-muted">No accounts found.</td></tr>`;
    return;
  }
  tbody.innerHTML = list.map(a => `
    <tr>
      <td>${a.userName ?? ""}</td>
      <td>${a.email ?? ""}</td>
      <td>${a.role ?? ""}</td>
      <td>
        <button class="btn btn-sm btn-outline-primary me-1" onclick='openEdit(${JSON.stringify(a)})'>Edit</button>
        <button class="btn btn-sm btn-outline-danger" onclick='delAcc(${a.id})'>Delete</button>
      </td>
    </tr>
  `).join("");
}

// ===== Initial load
(async () => {
  const data = await getJSON("/account?handler=List"); 
  renderRows(data);
})();

    // ===== Create (JSON + header token)
    document.getElementById("createForm").addEventListener("submit", async (e) => {
      e.preventDefault();

      try {
        const fd = new FormData(e.target);
        const data = Object.fromEntries(fd.entries());
        data.Role = parseInt(data.Role, 10);

        const res = await postJSON("/account?handler=Create", data);

        // Tùy postJSON trả gì:
        // - Nếu trả Response: dùng res.ok
        // - Nếu trả object: dùng res.success
        const ok = (res?.ok === true) || (res?.success === true);

        if (ok) {
          // Đóng modal ĐÚNG CÁCH
          const modalEl = document.getElementById("createModal");
          const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
          modal.hide();

          // Cập nhật list
          const list = await getJSON("/account?handler=List");
          renderRows(list);

          showToast("Created account successfully");
        } else {
          throw new Error(res?.error || res?.message || "Create failed");
        }
      } catch (err) {
        console.error(err);
        alert(err.message || "Create failed");
      } finally {
        // Phòng khi backdrop kẹt
        document.body.classList.remove("modal-open");
        document.body.style.removeProperty("padding-right");
        document.querySelectorAll(".modal-backdrop").forEach(el => el.remove());
      }
    });

// ===== Edit
function openEdit(a){
  const f = document.getElementById("editForm");
  f.Id.value = a.id;
  f.UserName.value = a.userName;
  f.Email.value = a.email;
  f.Role.value = a.role;
  new bootstrap.Modal("#editModal").show();
}
document.getElementById("editForm").addEventListener("submit", async (e) => {
  e.preventDefault();
  const fd = new FormData(e.target);
  const data = Object.fromEntries(fd.entries());
  data.Role = parseInt(data.Role, 10);

  const res = await postJSON("/account?handler=Edit", data);
  if(res.ok){
    bootstrap.Modal.getInstance(document.getElementById("editModal"))?.hide();
    renderRows(await getJSON("/account?handler=List"));
  } else {
    alert(res.error || "Save failed");
  }
});

// ===== Delete
async function delAcc(id){
  if(!confirm("Delete this account?")) return;
      const res = await postJSON('/account?handler=Delete', { Id: Number(id) });
  if(res.ok){
    renderRows(await getJSON("/account?handler=List"));
  } else {
    alert(res.error || "Delete failed");
  }
}
</script>

